Subject: [PATCH] add snackbars
---
Index: lib/database/crossword_info_repository.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/database/crossword_info_repository.dart b/lib/database/crossword_info_repository.dart
--- a/lib/database/crossword_info_repository.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/database/crossword_info_repository.dart	(date 1670710722018)
@@ -32,10 +32,10 @@
     }
   }
 
-  Future<int> updateCrosswordInfo(CrosswordInfo photo) async {
+  Future<int> updateCrosswordInfo(CrosswordInfo crosswordInfo) async {
     final db = await CrosswordDatabase.instance.database;
-    return db.update(tableName, photo.toJson(),
-        where: '${CrosswordInfoFields.id} = ?', whereArgs: [photo.id]);
+    return db.update(tableName, crosswordInfo.toJson(),
+        where: '${CrosswordInfoFields.id} = ?', whereArgs: [crosswordInfo.id]);
   }
 
   Future<List<CrosswordInfo>> getAllCrosswordsInfo() async {
Index: lib/view/logging_view.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/view/logging_view.dart b/lib/view/logging_view.dart
--- a/lib/view/logging_view.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/view/logging_view.dart	(date 1670624894760)
@@ -98,7 +98,7 @@
   }
 
   Future<void> login(BuildContext context, String userId) async {
-    var response = await HttpUtil.userLogin(userId);
+    var response = await HttpUtil.loginUser(userId);
 
     var status = response.statusCode;
     if (status == 200) {
@@ -120,7 +120,7 @@
   }
 
   Future<void> register(context) async {
-    var response = await HttpUtil.userRegister();
+    var response = await HttpUtil.registerUser();
 
     var status = response.statusCode;
     if (status == 201) {
Index: lib/util/http_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/util/http_util.dart b/lib/util/http_util.dart
--- a/lib/util/http_util.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/util/http_util.dart	(date 1670749253802)
@@ -2,15 +2,17 @@
 import 'dart:io';
 
 import 'package:async/async.dart';
+import 'package:flutter/services.dart';
 import 'package:http/http.dart' as http;
 import 'package:intl/intl.dart';
 import 'package:path/path.dart';
+import 'package:path_provider/path_provider.dart';
 
 class HttpUtil {
-  static const String baseUrl = "crossword-solver.theliver.pl";
-  // static const String baseUrl = "10.0.2.2:5326";
+  // static const String baseUrl = "crossword-solver.theliver.pl";
+  static const String baseUrl = "10.0.2.2:5326";
 
-  static Future<http.Response> userLogin(String userId) async {
+  static Future<http.Response> loginUser(String userId) async {
     var url = Uri.http(baseUrl, '/api/login');
     var body = {'user_id': userId};
     var headers = {HttpHeaders.contentTypeHeader: 'application/json'};
@@ -24,27 +26,31 @@
     return response;
   }
 
-  static Future<http.Response> userRegister() async {
+  static Future<http.Response> registerUser() async {
     var url = Uri.http(baseUrl, '/api/register');
 
     var response = await http.post(url);
     return response;
   }
 
-  static Future<http.Response> crosswordSend(
-      String userId,
-      File imageFile
-  ) async {
+  static Future<http.Response> sendCrossword(String userId, String imagePath) async {
     var url = Uri.http(baseUrl, '/api/solver');
     var request = http.MultipartRequest('POST', url);
 
+    final byteData = await rootBundle.load('assets/images/crossword.jpg');
+
+    var imageFile = File('${(await getTemporaryDirectory()).path}/crossword.jpg');
+    imageFile = await imageFile.writeAsBytes(byteData.buffer
+        .asUint8List(byteData.offsetInBytes, byteData.lengthInBytes));
+
+    // var imageFile = File(imagePath);
     var stream = http.ByteStream(DelegatingStream(imageFile.openRead()));
     var length = await imageFile.length();
     var image = http.MultipartFile(
         'image',
         stream,
         length,
-        filename: basename(imageFile.path)
+        filename: basename(imagePath)
     );
 
     var date = DateFormat("y-MMMM-d H:m:s").format(DateTime.now());
@@ -56,6 +62,38 @@
     var myRequest = await request.send();
     var response = await http.Response.fromStream(myRequest);
 
+    return response;
+  }
+
+  static Future<http.Response> getCrosswordStatus(String userId, String crosswordId) async {
+    var args = {
+      'user_id': userId,
+      'crossword_id': crosswordId
+    };
+    var url = Uri.http(baseUrl, '/api/crossword/status', args);
+    var headers = {HttpHeaders.contentTypeHeader: 'application/json'};
+
+    var response = await http.get(
+        url,
+        headers: headers,
+    );
+
+    return response;
+  }
+
+  static Future<http.Response> getSolvedCrossword(String userId, String crosswordId) async {
+    var args = {
+      'user_id': userId,
+      'crossword_id': crosswordId
+    };
+    var url = Uri.http(baseUrl, '/api/crossword', args);
+    var headers = {HttpHeaders.contentTypeHeader: 'application/json'};
+
+    var response = await http.get(
+      url,
+      headers: headers,
+    );
+
     return response;
   }
 }
Index: lib/view/app.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/view/app.dart b/lib/view/app.dart
--- a/lib/view/app.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/view/app.dart	(date 1670748504751)
@@ -28,6 +28,7 @@
 }
 
 class _AppViewState extends State<AppView> {
+  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
   int _selectedIndex = 0;
   String _title = "Rozwiąż krzyżówkę";
 
@@ -62,6 +63,7 @@
     ]);
 
     return Scaffold(
+        key: scaffoldKey,
         appBar: AppBar(
           title: Text(_title),
         ),
Index: lib/view/my_account.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/view/my_account.dart b/lib/view/my_account.dart
--- a/lib/view/my_account.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/view/my_account.dart	(date 1670749253814)
@@ -1,7 +1,14 @@
+import 'dart:convert';
+import 'dart:io';
+
+import 'package:crossword_solver/util/http_util.dart';
 import 'package:crossword_solver/util/prefs_util.dart';
 import 'package:crossword_solver/view/logging_view.dart';
 import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:path/path.dart';
+import 'package:path_provider/path_provider.dart';
 
 import '../util/loading_page_util.dart';
 
@@ -45,6 +52,7 @@
             },
           ),
           logoutButton(),
+          testButton(),
         ],
       ),
     );
@@ -86,4 +94,79 @@
           (Route<dynamic> route) => false,
     );
   }
+
+  // TODO testButton and its test function only for testing purposes
+  Container testButton() {
+    return Container(
+      margin: const EdgeInsets.only(top: 80, left: 20, right: 20),
+      child: Builder(builder: (context) => ElevatedButton(
+        style: buttonStyle,
+        onPressed: () async {
+          test();
+        },
+        child: const Text(
+          'Testuj',
+          style: TextStyle(fontSize: 15),
+        ),
+      ),),
+    );
+  }
+
+  Future<void> test() async {
+    var userId = await PrefsUtil.getUserId();
+
+    final byteData = await rootBundle.load('assets/images/crossword.jpg');
+
+    var imageFile = File('${(await getTemporaryDirectory()).path}/crossword.jpg');
+    imageFile = await imageFile.writeAsBytes(byteData.buffer
+        .asUint8List(byteData.offsetInBytes, byteData.lengthInBytes));
+
+    var imagePath = imageFile.path;
+
+    var sendCrosswordResponse = await HttpUtil.sendCrossword(userId, imagePath);
+
+    var crosswordId = jsonDecode(sendCrosswordResponse.body)['id'];
+
+    for (int i = 0; i < 10; i++) {
+      await Future.delayed(const Duration(seconds: 3));
+
+      var getCrosswordStatusResponse = await HttpUtil.getCrosswordStatus(
+          userId,
+          crosswordId.toString()
+      );
+
+      var body = jsonDecode(getCrosswordStatusResponse.body);
+
+      print(body);
+    }
+
+    var getSolvedCrosswordResponse = await HttpUtil.getSolvedCrossword(
+        userId,
+        crosswordId.toString()
+    );
+
+    Directory documentDirectory = await getApplicationDocumentsDirectory();
+    File solvedImageFile = File(join(documentDirectory.path, '${jsonDecode(sendCrosswordResponse.body)['crossword_name']}.png'));
+    solvedImageFile.writeAsBytesSync(getSolvedCrosswordResponse.bodyBytes);
+
+    print(getSolvedCrosswordResponse);
+    print(getSolvedCrosswordResponse.body);
+    print(getSolvedCrosswordResponse.bodyBytes);
+    print(solvedImageFile.path);
+
+    // saveImage();
+  }
+
+  // void saveImage(int id, String path, String crosswordName, String userId) async {
+  //   CrosswordInfoRepository crosswordInfoRepository = CrosswordInfoRepository();
+  //   CrosswordInfo crosswordInfo = CrosswordInfo(
+  //       id: id,
+  //       path: path,
+  //       crosswordName: crosswordName,
+  //       timestamp: DateTime.now(),
+  //       userId: userId,
+  //       status: "new"
+  //   );
+  //   crosswordInfoRepository.insertCrosswordInfo(crosswordInfo);
+  // }
 }
Index: lib/view/solve_crossword.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/view/solve_crossword.dart b/lib/view/solve_crossword.dart
--- a/lib/view/solve_crossword.dart	(revision 4f992e7c4d2b22210a6ff032a33582b027297d97)
+++ b/lib/view/solve_crossword.dart	(date 1670749253810)
@@ -136,7 +136,9 @@
       XFile imageFromGallery = XFile(pickedFile.path);
 
       String croppedImagePath = await cropImage(imageFromGallery);
-      await uploadAndSaveUnprocessedImage(croppedImagePath);
+      String userId = await PrefsUtil.getUserId();
+
+      await uploadAndSaveUnprocessedImage(userId, croppedImagePath, context);
 
       navigateToApp(context);
     }
@@ -152,9 +154,14 @@
       }
 
       String croppedImagePath = await cropImage(imageFromCamera);
-      await uploadAndSaveUnprocessedImage(croppedImagePath);
+      String userId = await PrefsUtil.getUserId();
+
+      var crosswordId = await uploadAndSaveUnprocessedImage(userId, croppedImagePath, context);
 
-      navigateToApp(context);
+      // ignore: use_build_context_synchronously
+      await checkCrosswordStatus(userId, crosswordId.toString(), context);
+
+      // navigateToApp(context);
     } catch (e) {
       print(e);
     }
@@ -177,10 +184,8 @@
     return path;
   }
 
-  Future<void> uploadAndSaveUnprocessedImage(String imagePath) async {
-    String userId = await PrefsUtil.getUserId();
-
-    var response = await sendImageToServer(userId, imagePath);
+  Future<dynamic> uploadAndSaveUnprocessedImage(String userId, String imagePath, BuildContext context) async {
+    var response = await sendImageToServer(userId, imagePath, context);
 
     var crosswordId = response['id'];
     var crosswordName = response['crossword_name'];
@@ -191,19 +196,25 @@
         crosswordName,
         userId
     );
+
+    return crosswordId;
   }
 
-  Future<dynamic> sendImageToServer(String userId, String imagePath) async {
-    var response = await HttpUtil.crosswordSend(
+  Future<dynamic> sendImageToServer(String userId, String imagePath, BuildContext context) async {
+    var response = await HttpUtil.sendCrossword(
         userId,
-        File(imagePath)
+        imagePath
     );
 
     var body = jsonDecode(response.body);
 
-    if (response.statusCode == 200) {
+    var status = response.statusCode;
+    if (status == 200) {
       print('upload sucess');
 
+      // ScaffoldMessenger.of(context)
+      //     .showSnackBar(serverErrorSnackBar(status.toString()));
+
       // TODO
       // alert ze krzyzowka wyslana na serwer albo ze sie nie udalo
       // utworzenie watku do sprawdzania statusu
@@ -211,6 +222,9 @@
 
     } else {
       print("Error ${response.statusCode}");
+
+      // ScaffoldMessenger.of(context)
+      //     .showSnackBar(serverErrorSnackBar(status.toString()));
     }
 
     return body;
@@ -234,4 +248,96 @@
       builder: (context) => const App(),
     ));
   }
+
+  SnackBar serverErrorSnackBar(String statusCode) {
+    return SnackBar(
+        behavior: SnackBarBehavior.floating,
+        backgroundColor: Colors.red,
+        content: Text("Error! Status code: $statusCode")
+    );
+  }
+
+  Future<void> checkCrosswordStatus(String userId, String crosswordId, BuildContext context) async {
+    print("checkCrosswordStatus");
+
+    var resposne = await HttpUtil.getCrosswordStatus(
+        userId,
+        crosswordId.toString()
+    );
+
+    var decodedResponse = jsonDecode(resposne.body);
+    print(decodedResponse);
+
+    var status = decodedResponse['status'];
+    print(status);
+
+    while (status != "solved_waiting" && status != "cannot_solve") {
+      await Future.delayed(const Duration(seconds: 1));
+
+      var resposne = await HttpUtil.getCrosswordStatus(
+          userId,
+          crosswordId.toString()
+      );
+
+      decodedResponse = jsonDecode(resposne.body);
+      print(decodedResponse);
+
+      status = decodedResponse['status'];
+      print(status);
+    }
+
+    if (status == "cannot_solve") {
+      print("cant solve crossword");
+
+      var snackBar = serverSolvingErrorSnackBar(decodedResponse);
+      ScaffoldMessenger.of(context).showSnackBar(snackBar);
+    } else {
+      print("crossword solved - waiting");
+
+      // var getSolvedCrosswordResponse = await HttpUtil.getSolvedCrossword(
+      //     userId,
+      //     crosswordId.toString()
+      // );
+      //
+      // Directory documentDirectory = await getApplicationDocumentsDirectory();
+      // File solvedImageFile = File(join(documentDirectory.path, '${name}.png'));
+      // solvedImageFile.writeAsBytesSync(getSolvedCrosswordResponse.bodyBytes);
+
+      var snackBar = serverSolvedMessageSnackbar(decodedResponse);
+      // scaffoldKey.currentState.showSnackBar(snackBar);
+      ScaffoldMessenger.of(context).showSnackBar(snackBar);
+    }
+  }
+
+  SnackBar serverSolvedMessageSnackbar(dynamic decodedResponse) {
+    var status = decodedResponse['status'];
+    var message = decodedResponse['message'];
+
+    return SnackBar(
+      behavior: SnackBarBehavior.floating,
+      content: Text("Status: $status, message: $message"),
+      backgroundColor: (Colors.black),
+      action: SnackBarAction(
+        label: 'dismiss',
+        onPressed: () {
+        },
+      ),
+    );
+  }
+
+  SnackBar serverSolvingErrorSnackBar(dynamic decodedResponse) {
+    var status = decodedResponse['status'];
+    var message = decodedResponse['message'];
+
+    return SnackBar(
+      behavior: SnackBarBehavior.floating,
+      content: Text("Status: $status, message: $message"),
+      backgroundColor: (Colors.red),
+      action: SnackBarAction(
+        label: 'dismiss',
+        onPressed: () {
+        },
+      ),
+    );
+  }
 }
